#!/usr/bin/python3
import dns
import dns.resolver
import csv
import sys
import argparse

__version__ = "0.1.0"

usage = """Usage: 
    getRecordsFromCsv domain csvFilePath [outputFilePath]
"""

def getArgs():
    parser = argparse.ArgumentParser()

    # Required positional argument
    parser.add_argument("domain", help="primary domain name, e.g., google.com")
    parser.add_argument("inFile", help="DNS record input CSV")

    parser.add_argument(
        "-o",
        "--outfile",
        action="store",
        dest="outFile",
        help="output CSV",
    )
    parser.add_argument(
        "-n",
        "--namemserver",
        action="store",
        dest="nameserver",
        help="nameserver to send queries to",
    )
    parser.add_argument(
        "-v", "--verbose", action="count", default=0, help="Verbosity (-v, -vv, etc)"
    )

    # Specify output of "--version"
    parser.add_argument(
        "--version",
        action="version",
        version="%(prog)s (version {version})".format(version=__version__),
    )
    args = parser.parse_args()

    args.outFile = f"{args.domain}.csv"

    if args.nameserver:
        tempOutfile = args.outFile.split(".csv")
        tempOutfile = "".join([tempOutfile[0], "@", args.nameserver, ".csv"])
        args.outFile = tempOutfile

    return args


def setNameserver(args):
    if args.verbose > 0:
        print(f"[+] Setting nameserver to {args.nameserver}")

    result = dns.resolver.query(args.nameserver, "A")
    nsIp = None
    for r in result:
        nsIp = r

    dns.resolver.default_resolver = dns.resolver.Resolver(configure=False)
    dns.resolver.default_resolver.nameservers = [str(nsIp)]


def generateQueriesFromCsv(domain, path):
    queries = []
    with open(path) as f:
        reader = csv.reader(f, delimiter=",")
        line_count = 0
        for row in reader:
            if line_count == 0:
                line_count += 1
                continue
            if row[0] == "" or row[0] == "@":
                subdomain = ""
            else:
                subdomain = f"{row[0]}."

            queryDomain = f"{subdomain}{domain}"

            query = {"domain": queryDomain, "subdomain": row[0], "recordType": row[1]}

            queries.append(query)
            line_count += 1

    return queries


def getResults(queries, args):
    results = []
    for q in queries:
        if args.verbose > 1:
            print("[+] Query:", q)
        result = dns.resolver.query(q["domain"], q["recordType"])
        for r in result:
            compiledResult = [q["subdomain"], q["recordType"], str(r)]
            if args.verbose > 0:
                print("[+] Result:", compiledResult)
            results.append(compiledResult)

    return results


def writeToCsv(results, args):
    with open(args.outFile, "w") as f:
        if args.verbose > 0:
            print(f"[+] Writing to {args.outFile}")
        writer = csv.writer(f)
        writer.writerow(["Sub Domain", "Record Type", "Result"])
        for r in results:
            writer.writerow(r)


if __name__ == "__main__":
    args = getArgs()
    if args.nameserver:
        setNameserver(args)

    queries = generateQueriesFromCsv(args.domain, args.inFile)
    results = getResults(queries, args)

    writeToCsv(results, args)
